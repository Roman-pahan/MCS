Классы, селекторы.
_________________________________________________________________________________________________
.container-1 .button{
Обращаемся ко всем кнопкам, далее выбираем из этого множества те, что относятся к классу .button-1
}

.container-1 > .button{
Обращаемся ко всем кнопкам, далее выбираем из этого множества те, что относятся к классу .button-1 (при вызове напрямую - через прямое наследование,
т.е. все элементы, которые несколько раз внутри или выше по рангу с классом .button не пройдкт по условию).
}

* {
Это обращение ко всем элементам, задание параметров по-умолчанию.
}

 .container-2 * {
Это обращение ко всем элементам, далле сортировка по  .container-2
}

a[class$="internal"]{
 Если наш класс оканчивается на internal, то стилизуется все, что заканчивается на internal
}

a[class^="link"]{
 Если наш класс начинается с link, то стилизуется все, что начинается с link
}

a[class*="k-e"]{
 Есть ли совпадение. Для сортировки.
}

a[class~="active"]{
 Есть ли совпадение по классу.
}


a[class!="internal"]{
  Находит элементы с полным совпадением, либо до "-"
}


Псевдоклассы, псевдоселекторы.
_________________________________________________________________________________________________

.list .item: first-child{
работаем только с первым элементом.
}

Чтобы убирать в этом случае дистанции или любые другие свойства классов выгодно использовать
.list .item: last-child или .list .item: first-child

Можно также использовать "селектор +": .item + .item

.list .item: not(:first-child){ - чтобы избежать верхней ситуации
 margin-left:20px;
}

tr:nth-child(odd){ - работа с нечетными элементами.
  background-color: red;
}
......(even){ - работа с четными элементами.
......(3n){ - работа с каждым третьим элементом
......(3n+1){ - работа с каждым третьим элементом, начиная с первого элемента.

<input type="checkbox" class="checkbox"/>
.checkbox{}
.checkbox:checked{
  margin-top:70px;
}












































